name: 🧩 R3C Foundation Ultra All-in-One Autonomous System

on:
  schedule:
    - cron: "0 0 * * 0"      # 매주 일요일 00:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  allinone:
    runs-on: ubuntu-latest
    steps:
      - name: 🧭 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🪶 Setup Git identity
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"

      ########################################################
      # 1️⃣ fork-lab branch auto-refresh
      ########################################################
      - name: 🌿 Maintain fork-lab branch
        run: |
          if git show-ref --verify --quiet refs/heads/fork-lab; then
            git checkout fork-lab
          else
            git checkout -b fork-lab
          fi
          echo "# 🧪 Fork Lab (Auto Reset Branch)" > README_FORK_LAB.md
          echo "- Last reset: $(date -u '+%Y-%m-%d %H:%M UTC')" >> README_FORK_LAB.md
          echo "Fork freely for testing and CI verification." >> README_FORK_LAB.md
          git add README_FORK_LAB.md
          git commit -m "🧪 Auto-refresh fork-lab ($(date -u '+%Y-%m-%d'))" || true
          git push origin fork-lab --force

      ########################################################
      # 2️⃣ Update CONTRIBUTING.md
      ########################################################
      - name: 🧾 Update CONTRIBUTING.md
        run: |
          cat > CONTRIBUTING.md <<'EOF'
# 🤝 Contributing to R3C Rust-LTSS

Welcome to the **R3C Foundation LTSS ecosystem.**  
You are encouraged to **fork, experiment, and submit pull requests** under the MIT License.

## 🌿 How to Fork
1. Fork this repository → https://github.com/r3c-foundation/rust-ltss/fork
2. Use `fork-lab` branch for testing.
3. Keep builds reproducible and minimal.

## ⚙️ Rules
| Rule | Description |
|------|--------------|
| 🦀 Rust 1.70 fixed | Do not modify rust-toolchain.toml |
| 🔒 Integrity | Include SHA256SUMS |
| 🧾 License | MIT for all contributions |

> *Freeze once. Sustain forever.*
EOF
          git add CONTRIBUTING.md
          git commit -m "🧾 Auto-update CONTRIBUTING.md ($(date -u '+%Y-%m-%d'))" || true
          git push origin main || true

      ########################################################
      # 3️⃣ Fetch and update OpenCollective sponsors
      ########################################################
      - name: 💖 Fetch OpenCollective Sponsors
        id: sponsors
        run: |
          mkdir -p .sponsors
          curl -s https://opencollective.com/r3c-foundation/members/all.json > .sponsors/sponsors.json
          cat .sponsors/sponsors.json | jq -r '.[] | select(.role=="BACKER") | "- [\(.name)](\(.profile))"' > .sponsors/list.md
          echo "### 💖 Sponsors" > SPONSORS.md
          echo "These amazing people and organizations support R3C Foundation via OpenCollective." >> SPONSORS.md
          echo "" >> SPONSORS.md
          cat .sponsors/list.md >> SPONSORS.md
          echo "" >> SPONSORS.md
          echo "> Auto-updated at $(date -u '+%Y-%m-%d %H:%M UTC')" >> SPONSORS.md

      ########################################################
      # 4️⃣ Insert/refresh sponsors section in README
      ########################################################
      - name: 🧩 Update README with sponsors
        run: |
          if grep -q "### 💖 Sponsors" README.md; then
            awk '/### 💖 Sponsors/{flag=1;print;system("cat SPONSORS.md");next}/^$/{flag=0}flag==0' README.md > tmp && mv tmp README.md
          else
            echo -e "\n\n$(cat SPONSORS.md)" >> README.md
          fi
          git add README.md SPONSORS.md
          git commit -m "💖 Auto-update sponsor list ($(date -u '+%Y-%m-%d'))" || true
          git push origin main || true

      ########################################################
      # 5️⃣ Build and release with checksum
      ########################################################
      - name: 🦀 Setup Rust 1.70.0
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.70.0

      - name: 🧱 Build release
        run: |
          if [ -f Cargo.toml ]; then
            cargo build --release
          else
            mkdir -p target/ltss
            echo "R3C LTSS dummy build success" > target/ltss/BUILD_LOG.txt
          fi

      - name: 🔒 Generate SHA256SUMS
        run: |
          cd target/ltss
          shasum -a 256 * > ../../SHA256SUMS.txt || echo "No build files"
          cd ../..

      - name: 💾 Configure remote (PAT)
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.WORKFLOW_PAT }}@github.com/${{ github.repository }}.git

      - name: 🔖 Tag and release
        run: |
          TAG="r3c-ltss-v$(date +'%Y.%m.%d')-auto"
          git add SHA256SUMS.txt || true
          git commit -m "🧾 Auto SHA256SUMS ($TAG)" || true
          git push origin main || true
          git tag -a "$TAG" -m "Automated LTSS release ($TAG)"
          git push origin "$TAG"

      ########################################################
      # 6️⃣ Propagate funding info to all repos
      ########################################################
      - name: 🔄 Sync FUNDING.yml to sub-repos
        if: ${{ github.repository == 'r3c-foundation/rust-ltss' }}
        run: |
          cat > .github/FUNDING.yml <<'EOF'
github: r3c-foundation
open_collective: r3c-foundation
custom:
  - https://opencollective.com/r3c-foundation
EOF
          for repo in r3c cpppm beyond-llvm r3c-nightly-ltss; do
            git clone https://github.com/r3c-foundation/$repo.git
            cd $repo
            mkdir -p .github
            cp ../.github/FUNDING.yml .github/
            git add .github/FUNDING.yml
            git commit -m "🔄 Sync FUNDING.yml from rust-ltss" || true
            git push https://x-access-token:${{ secrets.WORKFLOW_PAT }}@github.com/r3c-foundation/$repo.git main || true
            cd ..
          done
